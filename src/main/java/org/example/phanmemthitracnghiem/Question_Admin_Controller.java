package org.example.phanmemthitracnghiem;

import BUS.AnswerBUS;
import BUS.QuestionBUS;
import DAO.QuestionDAO;
import DTO.AnswerDTO;
import DTO.QuestionDTO;
import DTO.TopicDTO;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class Question_Admin_Controller {

    private AdminController adminController;

    @FXML
    private ImageView btnAdd;

    @FXML
    private Button btnAddImage;

    @FXML
    private ImageView btnDelete;

    @FXML
    private ImageView btnUpdate;

    @FXML
    private ComboBox<?> cbLevel;

    @FXML
    private ComboBox<?> cbTopicID;
    @FXML
    private TableView<QuestionDTO> tableQuestions; // ‚úÖ S·ª≠a ki·ªÉu d·ªØ li·ªáu
    @FXML
    private TableColumn<QuestionDTO, Integer> colID;
    @FXML
    private TableColumn<QuestionDTO, String> colContent;
    @FXML
    private TableColumn<QuestionDTO, String> colLevel;
    @FXML
    private TableColumn<QuestionDTO, Integer> colStatus;

    @FXML
    private TextField txtAnswerA, txtAnswerB, txtAnswerC, txtAnswerD, txtAnswerE;
    @FXML
    private RadioButton rbA, rbB, rbC, rbD, rbE;
    @FXML
    private ToggleGroup answerGroup;
    @FXML
    private Button btnAddAnswer, btnUpdateAnswer, btnDeleteAnswer;
    private int selectedQuestionID = -1;
    private List<AnswerDTO> currentAnswers;
    @FXML
    private TextField txtContent;

    @FXML
    private ImageView txtPictures; // ƒê·∫£m b·∫£o import t·ª´ javafx.scene.image.ImageView

    private File selectedFile;

    @FXML
    public void initialize() {
        currentAnswers = new ArrayList<>(); // üî• Fix l·ªói b·ªã null

        txtPictures.setVisible(false);
        rbA.setToggleGroup(answerGroup);
        rbB.setToggleGroup(answerGroup);
        rbC.setToggleGroup(answerGroup);
        rbD.setToggleGroup(answerGroup);
        rbE.setToggleGroup(answerGroup);

        // Li√™n k·∫øt d·ªØ li·ªáu TableView
        if (colID != null && colContent != null && colLevel != null && colStatus != null) {
            colID.setCellValueFactory(new PropertyValueFactory<>("qID"));
            colContent.setCellValueFactory(new PropertyValueFactory<>("qContent"));
            colLevel.setCellValueFactory(new PropertyValueFactory<>("qLevel"));
            colStatus.setCellValueFactory(new PropertyValueFactory<>("qStatus"));
        } else {
            System.err.println("TableColumns ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o trong FXML!");
        }

        // B·∫Øt s·ª± ki·ªán ch·ªçn c√¢u h·ªèi
        // B·∫Øt s·ª± ki·ªán ch·ªçn m·ªôt c√¢u h·ªèi trong b·∫£ng
        tableQuestions.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            if (newSelection != null) {
                selectedQuestionID = newSelection.getQID();
                txtContent.setText(newSelection.getQContent());
                loadAnswers(selectedQuestionID); // üî• Load c√¢u tr·∫£ l·ªùi c·ªßa c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn
            }
        });


        loadQuestions();
    }
    private boolean validateAnswers() {
        if (currentAnswers == null || currentAnswers.isEmpty()) {
            showAlert("C√¢u h·ªèi ph·∫£i c√≥ √≠t nh·∫•t 2 c√¢u tr·∫£ l·ªùi!");
            return false;
        }

        int count = 0;
        for (AnswerDTO ans : currentAnswers) {
            if (!ans.getAwContent().trim().isEmpty()) {
                count++;
            }
        }
        if (count < 2) {
            showAlert("C√¢u h·ªèi ph·∫£i c√≥ √≠t nh·∫•t 2 c√¢u tr·∫£ l·ªùi!");
            return false;
        }
        if (count > 5) {
            showAlert("C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c c√≥ qu√° 5 c√¢u tr·∫£ l·ªùi!");
            return false;
        }
        return true;
    }
    @FXML
    private void handleAddAnswer() {
        if (txtContent.getText().trim().isEmpty()) {
            showAlert("Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi!");
            return;
        }

        // ‚úÖ N·∫øu `ComboBox` ch∆∞a c√≥ d·ªØ li·ªáu, ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† "1"
        String level = (cbLevel.getValue() != null) ? cbLevel.getValue().toString() : "1";

        int topicID;
        try {
            topicID = (cbTopicID.getValue() != null) ? Integer.parseInt(cbTopicID.getValue().toString()) : 1;
        } catch (NumberFormatException e) {
            topicID = 1; // üî• N·∫øu kh√¥ng ph·∫£i s·ªë, ƒë·∫∑t m·∫∑c ƒë·ªãnh l√† 1
        }

        // üî• T·∫°o c√¢u h·ªèi m·ªõi (QuestionDTO)
        QuestionDTO newQuestion = new QuestionDTO(
                0,  // qID (m·ªõi n√™n ƒë·∫∑t 0)
                txtContent.getText(), // N·ªôi dung c√¢u h·ªèi
                "", // Kh√¥ng c√≥ h√¨nh ·∫£nh
                topicID, // ID ch·ªß ƒë·ªÅ
                level, // M·ª©c ƒë·ªô
                1  // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh l√† 1 (hi·ªÉn th·ªã)
        );

        // üî• L∆∞u c√¢u h·ªèi v√†o database
        boolean isAdded = QuestionBUS.getInstance().addQuestion(newQuestion);
        if (!isAdded) {
            showAlert("Th√™m c√¢u h·ªèi th·∫•t b·∫°i!");
            return;
        }

        int newQuestionID = QuestionBUS.getInstance().getLastInsertID();

        List<AnswerDTO> answerList = new ArrayList<>();
        if (!txtAnswerA.getText().trim().isEmpty()) {
            answerList.add(new AnswerDTO(0, newQuestionID, txtAnswerA.getText(), "", rbA.isSelected() ? 1 : 0, 1));
        }
        if (!txtAnswerB.getText().trim().isEmpty()) {
            answerList.add(new AnswerDTO(0, newQuestionID, txtAnswerB.getText(), "", rbB.isSelected() ? 1 : 0, 1));
        }
        if (!txtAnswerC.getText().trim().isEmpty()) {
            answerList.add(new AnswerDTO(0, newQuestionID, txtAnswerC.getText(), "", rbC.isSelected() ? 1 : 0, 1));
        }
        if (!txtAnswerD.getText().trim().isEmpty()) {
            answerList.add(new AnswerDTO(0, newQuestionID, txtAnswerD.getText(), "", rbD.isSelected() ? 1 : 0, 1));
        }
        if (!txtAnswerE.getText().trim().isEmpty()) {
            answerList.add(new AnswerDTO(0, newQuestionID, txtAnswerE.getText(), "", rbE.isSelected() ? 1 : 0, 1));
        }

        if (answerList.size() < 2) {
            showAlert("C√¢u h·ªèi ph·∫£i c√≥ √≠t nh·∫•t 2 c√¢u tr·∫£ l·ªùi!");
            return;
        }

        boolean answersAdded = AnswerBUS.getInstance().addAnswers(answerList);
        if (!answersAdded) {
            showAlert("L∆∞u c√¢u tr·∫£ l·ªùi th·∫•t b·∫°i!");
            return;
        }

        loadQuestions();
        loadAnswers(newQuestionID);
        showAlert("Th√™m c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi th√†nh c√¥ng!");
    }

    @FXML
    private void handleUpdateAnswer() {
        if (selectedQuestionID == -1) {
            showAlert("‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt c√¢u h·ªèi tr∆∞·ªõc!");
            return;
        }

        // ‚úÖ C·∫≠p nh·∫≠t n·ªôi dung c√¢u h·ªèi t·ª´ TextField
        String updatedQuestionContent = txtContent.getText().trim();
        if (updatedQuestionContent.isEmpty()) {
            showAlert("‚ö†Ô∏è N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            return;
        }

        // ‚úÖ C·∫≠p nh·∫≠t Level v√† Topic (m·∫∑c ƒë·ªãnh 1 n·∫øu kh√¥ng ch·ªçn)
        String updatedLevel = (cbLevel.getValue() != null) ? cbLevel.getValue().toString() : "1";
        int updatedTopicID = (cbTopicID.getValue() != null) ? Integer.parseInt(cbTopicID.getValue().toString()) : 1;

        // ‚úÖ T·∫°o ƒë·ªëi t∆∞·ª£ng QuestionDTO ƒë·ªÉ c·∫≠p nh·∫≠t
        QuestionDTO updatedQuestion = new QuestionDTO(
                selectedQuestionID,
                updatedQuestionContent,
                "", // ·∫¢nh (n·∫øu c√≥ th·ªÉ th√™m)
                updatedTopicID,
                updatedLevel,
                1 // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
        );

        // üî• C·∫≠p nh·∫≠t c√¢u h·ªèi trong DB
        boolean questionUpdated = QuestionBUS.getInstance().updateQuestion(updatedQuestion);

        // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch c√¢u tr·∫£ l·ªùi
        for (int i = 0; i < currentAnswers.size(); i++) {
            AnswerDTO answer = currentAnswers.get(i);

            switch (i) {
                case 0:
                    answer.setAwContent(txtAnswerA.getText());
                    answer.setIsRight(rbA.isSelected() ? 1 : 0);
                    break;
                case 1:
                    answer.setAwContent(txtAnswerB.getText());
                    answer.setIsRight(rbB.isSelected() ? 1 : 0);
                    break;
                case 2:
                    answer.setAwContent(txtAnswerC.getText());
                    answer.setIsRight(rbC.isSelected() ? 1 : 0);
                    break;
                case 3:
                    answer.setAwContent(txtAnswerD.getText());
                    answer.setIsRight(rbD.isSelected() ? 1 : 0);
                    break;
                case 4:
                    answer.setAwContent(txtAnswerE.getText());
                    answer.setIsRight(rbE.isSelected() ? 1 : 0);
                    break;
            }

            // üî• C·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi trong DB
            AnswerBUS.getInstance().updateAnswer(answer);
        }

        // üü¢ Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng n·∫øu m·ªçi th·ª© OK
        if (questionUpdated) {
            showAlert("‚úÖ C·∫≠p nh·∫≠t c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi th√†nh c√¥ng!");
            loadQuestions(); // L√†m m·ªõi danh s√°ch c√¢u h·ªèi
            loadAnswers(selectedQuestionID); // L√†m m·ªõi danh s√°ch c√¢u tr·∫£ l·ªùi
        } else {
            showAlert("‚ùå L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi!");
        }
    }

    @FXML
    private void handleDeleteAnswer() {
        if (selectedQuestionID == -1) {
            showAlert("‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt c√¢u h·ªèi tr∆∞·ªõc khi x√≥a!");
            return;
        }

        // üî• Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
        Alert confirmDialog = new Alert(Alert.AlertType.CONFIRMATION);
        confirmDialog.setTitle("X√°c nh·∫≠n x√≥a");
        confirmDialog.setHeaderText("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¢u h·ªèi n√†y?");
        confirmDialog.setContentText("H√†nh ƒë·ªông n√†y s·∫Ω x√≥a c·∫£ c√¢u h·ªèi v√† c√°c c√¢u tr·∫£ l·ªùi li√™n quan!");

        ButtonType btnYes = new ButtonType("X√≥a", ButtonBar.ButtonData.OK_DONE);
        ButtonType btnNo = new ButtonType("H·ªßy", ButtonBar.ButtonData.CANCEL_CLOSE);
        confirmDialog.getButtonTypes().setAll(btnYes, btnNo);

        // üü¢ N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n x√≥a
        confirmDialog.showAndWait().ifPresent(response -> {
            if (response == btnYes) {
                // 1Ô∏è‚É£ X√≥a to√†n b·ªô c√¢u tr·∫£ l·ªùi c·ªßa c√¢u h·ªèi
                boolean answersDeleted = AnswerBUS.getInstance().deleteAnswersByQuestionID(selectedQuestionID);

                // 2Ô∏è‚É£ X√≥a c√¢u h·ªèi kh·ªèi DB
                boolean questionDeleted = QuestionBUS.getInstance().deleteQuestion(selectedQuestionID);

                // 3Ô∏è‚É£ Ki·ªÉm tra k·∫øt qu·∫£ v√† c·∫≠p nh·∫≠t UI
                if (answersDeleted && questionDeleted) {
                    showAlert("‚úÖ ƒê√£ x√≥a c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi th√†nh c√¥ng!");
                    selectedQuestionID = -1;
                    loadQuestions(); // L√†m m·ªõi danh s√°ch c√¢u h·ªèi
                } else {
                    showAlert("‚ùå X√≥a th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
                }
            }
        });
    }


    @FXML
    private void addQuestion() {
        if (txtContent.getText().trim().isEmpty()) {
            showAlert("Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi!");
            return;
        }

        if (!validateAnswers()) return;

        QuestionDTO newQuestion = new QuestionDTO(
                0, txtContent.getText(), "", 1, cbLevel.getValue().toString(), 1
        );
        boolean isSuccess = QuestionBUS.getInstance().addQuestion(newQuestion);

        if (isSuccess) {
            int newQuestionID = QuestionBUS.getInstance().getLastInsertID();
            saveAnswers(newQuestionID);
            showAlert("Th√™m c√¢u h·ªèi th√†nh c√¥ng!");
            loadQuestions();
        } else {
            showAlert("Th√™m c√¢u h·ªèi th·∫•t b·∫°i!");
        }
    }
    /**
     * ‚úÖ L∆∞u danh s√°ch c√¢u tr·∫£ l·ªùi v√†o database
     */
    private void saveAnswers(int questionID) {
        for (int i = 0; i < currentAnswers.size(); i++) {
            AnswerDTO answer = currentAnswers.get(i);
            answer.setQID(questionID);
            answer.setAwStatus(1);

            if (i == 0 && rbA.isSelected()) answer.setIsRight(1);
            if (i == 1 && rbB.isSelected()) answer.setIsRight(1);
            if (i == 2 && rbC.isSelected()) answer.setIsRight(1);
            if (i == 3 && rbD.isSelected()) answer.setIsRight(1);
            if (i == 4 && rbE.isSelected()) answer.setIsRight(1);

            AnswerBUS.getInstance().addAnswer(answer);
        }
    }
    private void loadQuestions() {
        List<QuestionDTO> questions = QuestionBUS.getInstance().getAllQuestions();
        ObservableList<QuestionDTO> observableList = FXCollections.observableArrayList(questions);
        tableQuestions.setItems(observableList);
    }
    /**
     * ‚úÖ Load c√¢u tr·∫£ l·ªùi khi ch·ªçn c√¢u h·ªèi
     */
    private void loadAnswers(int questionID) {
        // üî• Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ID h·ª£p l·ªá
        if (questionID == -1) {
            System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë∆∞·ª£c ch·ªçn!");
            return;
        }

        // üî• L·∫•y danh s√°ch c√¢u tr·∫£ l·ªùi t·ª´ Database
        currentAnswers = AnswerBUS.getInstance().getAnswersByQuestionID(questionID);

        // üõ† X√≥a n·ªôi dung c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        txtAnswerA.clear();
        txtAnswerB.clear();
        txtAnswerC.clear();
        txtAnswerD.clear();
        txtAnswerE.clear();
        rbA.setSelected(false);
        rbB.setSelected(false);
        rbC.setSelected(false);
        rbD.setSelected(false);
        rbE.setSelected(false);

        // üìù In ra danh s√°ch c√¢u tr·∫£ l·ªùi ƒë·ªÉ ki·ªÉm tra
        System.out.println("üìå C√¢u tr·∫£ l·ªùi c·ªßa c√¢u h·ªèi ID " + questionID + ": " + currentAnswers.size());

        // üîÑ Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi l√™n UI
        for (int i = 0; i < currentAnswers.size(); i++) {
            AnswerDTO answer = currentAnswers.get(i);
            switch (i) {
                case 0:
                    txtAnswerA.setText(answer.getAwContent());
                    rbA.setSelected(answer.getIsRight() == 1);
                    break;
                case 1:
                    txtAnswerB.setText(answer.getAwContent());
                    rbB.setSelected(answer.getIsRight() == 1);
                    break;
                case 2:
                    txtAnswerC.setText(answer.getAwContent());
                    rbC.setSelected(answer.getIsRight() == 1);
                    break;
                case 3:
                    txtAnswerD.setText(answer.getAwContent());
                    rbD.setSelected(answer.getIsRight() == 1);
                    break;
                case 4:
                    txtAnswerE.setText(answer.getAwContent());
                    rbE.setSelected(answer.getIsRight() == 1);
                    break;
            }
        }
    }



    private void showAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle("Th√¥ng b√°o");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
    @FXML
    private void handleAddImage() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Ch·ªçn h√¨nh ·∫£nh");

        // Ch·ªâ ch·ªçn file ·∫£nh (PNG, JPG, JPEG)
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("H√¨nh ·∫£nh", "*.png", "*.jpg", "*.jpeg")
        );

        // M·ªü h·ªôp tho·∫°i ch·ªçn file
        Stage stage = (Stage) btnAddImage.getScene().getWindow();
        selectedFile = fileChooser.showOpenDialog(stage);

        if (selectedFile != null) {
            Image image = new Image(selectedFile.toURI().toString());
            txtPictures.setImage(image); // ƒê·∫∑t ·∫£nh v√†o ImageView
            txtPictures.setVisible(true); // Hi·ªÉn th·ªã ·∫£nh
            btnAddImage.setVisible(false); // ·∫®n n√∫t "Add Image"
        }
    }
}
